<?xml version="1.0" encoding="UTF-8"?>
<?xfa generator="AdobeLiveCycleDesignerES_V9.0.0.0.20091029.1.612548" APIVersion="3.1.9277.0"?>
<xdp:xdp xmlns:xdp="http://ns.adobe.com/xdp/" timeStamp="2012-08-27T23:33:33Z" uuid="4ea45d0a-45f8-4540-b5df-628f43057788">
<template xmlns="http://www.xfa.org/schema/xfa-template/2.8/">
   <?formServer defaultPDFRenderFormat acrobat9.0static?>
   <subform name="form1" locale="en_AU" layout="tb">
      <pageSet>
         <pageArea>
            <contentArea x="20mm" y="40mm" w="170mm" h="235mm"/>
            <medium stock="a4" short="210mm" long="297mm"/>
         </pageArea>
      </pageSet>
      <subform>
         <variables>
            <script contentType="application/x-javascript" name="productUtils">/********************************
 * productUtils.js
 *
 * A library of utilities to manipulate 
 * and derive information from AHM product codes
 *
 * Written by Shafat Hussain
 * Avoka Technologies
 * shussain@avoka.com
 ******************************/

/*
 * getExtrasLevel()
 * Obtain level of extras cover based on product code
 *
 * @param {strProd} Product code, should be keyno_042
 * @return level of extras cover
 * N - No Extras
 * 7 - Y57 First Step
 * 1 - Basic Extras
 * 4 - Lifestyle Extras 
 * 2 - Family Extras
 * 3 - Super Extras
 */
function getExtrasLevel(strProd) {
  var level = 'N';
  var arr = splitProducts(strProd);
  if (arr.length &gt; 0 &amp;&amp; arr[0].length == 3) {
    if (arr[0] == "AMB") {
	  level = 'N';
	}
	else {
	  level = arr[0].charAt(2);
	}  
  }
  
  if (level != 'N' &amp;&amp; level != '7' &amp;&amp; level != '1' &amp;&amp; level != '4' &amp;&amp; level != '2' &amp;&amp; level != '3') {
    level = 'N';
  }
  
  return level;
}

/*
 * getExtrasDesc()
 * Obtain description of extras cover based on product code
 *
 * @param {strProd} Product code, should be keyno_042
 * @return description of extras cover
 * N - No Extras
 * 7 - Y57 First Step
 * 1 - Basic Extras
 * 4 - Lifestyle Extras 
 * 2 - Family Extras
 * 3 - Super Extras
 */
function getExtrasDesc(strProd) {
  var extrasLevel = getExtrasLevel(strProd);
  switch(extrasLevel){
    case "7":
      return "First Step";
    break;
    case "1":
      return "Basic Extras";
    break;
    case "4":
      return "Lifestyle Extras";
    break;
    case "2":
      return "Family Extras";
    break;
    case "3":
      return "Super Extras";
    break; 
    default:
      return "";
  }
}

/*
 * getHospitalLevel()
 * Obtain level of hospital cover based on product code
 *
 * @param {strProd} Product code, should be keyno_042
 * @return level of hospital cover
 * N - No Hospital
 * Z - Budget Hospital
 * Y - Y57 First Step
 * B - Basic Hospital
 * S - Essential Hospital
 * F - Family Hospital
 * T - Top Hospital
 */
function getHospitalLevel(strProd) {
  var level = 'N';
  var arr = splitProducts(strProd);
  if (arr.length &gt; 0 &amp;&amp; arr[0].length == 3) {
    if (arr[0] == "AMB") {
	  level = 'N';
	}
	else {
	  level = arr[0].charAt(0);
	}  
  }
  if (level != 'N' &amp;&amp; level != 'Z' &amp;&amp; level != 'Y' &amp;&amp; level != 'B' &amp;&amp; level != 'S' &amp;&amp; level != 'F' &amp;&amp; level != 'T') {
    level = 'N';
  }  
  return level;
}

/*
 * getHospitalDesc()
 * Obtain description of hospital cover based on product code
 *
 * @param {strProd} Product code, should be keyno_042
 * @return description of hospital cover
 * N - No Hospital
 * Z - Budget Hospital
 * Y - Y57 First Step
 * B - Basic Hospital
 * S - Essential Hospital
 * F - Family Hospital
 * T - Top Hospital
 */
function getHospitalDesc(strProd) {
  var hospLevel = getHospitalLevel(strProd);
  switch(hospLevel){
    case "Z":
      return "Budget Hospital";
    break;
    case "Y":
      return "First Step";
    break;
    case "B":
      return "Basic Hospital";
    break;
    case "S":
      return "Essential Hospital";
    break;
    case "F":
      return "Family Hospital";
    break;
    case "T":
      var copay = getCopayment(strProd);      
      return (copay == 0) ? "Top Hospital" : ("Top Hospital " + copay);
    break; 
    default:
      return "";
  }
}


/*
 * hasCopayment()
 * Does this product have a copayment as opposed to an excess
 * Returns true for hospital levels B S F and T even if copayment amount is 0
 * @param {strProd} Product code, should be keyno_042
 * @return true if product has a copayment level
 */
function hasCopayment(strProd) {
  var level = getHospitalLevel(strProd);
  return (level == 'B' || level == 'S' || level == 'F' || level == 'T');
}

/*
 * hasExcess()
 * Does this product have an excess as opposed to a copayment
 * Returns true for hospital levels Y and Z
 * @param {strProd} Product code, should be keyno_042
 * @return true if product has excess level
 */
function hasExcess(strProd) {
  var level = getHospitalLevel(strProd);
  return (level == 'Y' || level == 'Z');
}

/*
 * getCopayment()
 * Obtain level of Copayment based on product code. 
 * Will return 0 for products which don't have a copayment
 * but have an excess (i.e First Step, Budget Hospital)
 * Use hasCopayment() to make sure that copayments apply to
 * product first. Use getExcess() for products with an excess
 * @param {strProd} Product code, should be keyno_042
 * @return level of Copayment 
 * 0 - $0
 * 5 - $500
 * 8 - $800
 */
function getCopayment(strProd) {
  var amt = 0;
  if (hasCopayment(strProd)) {
    var arr = splitProducts(strProd);
    amt = parseInt(arr[0].charAt(1), 10) || 0;
   }
  return amt;
}


/*
 * getExcess()
 * Obtain level of Excess based on product code. 
 * Will return 0 for products which don't have an excess
 * but have a copayment (e.g. Top Hospital, Family Hospital)
 * Use hasExcess() to make sure that excesses apply to
 * product first. Use getCopayment() for products with a copayment
 * @param {strProd} Product code, should be keyno_042
 * @return level of Excess
 * 0 - $0
 * 5 - $500
 * 8 - $800
 */
function getExcess(strProd) {
  var amt = 0;
  if (hasExcess(strProd)) {
    var arr = splitProducts(strProd);
    amt = parseInt(arr[0].charAt(1), 10) || 0;
   }
  return amt;
}

/* 
 * depracated
 * use getHospitalLevel instead and check for level = 'Y'
 */
function hasFirstStep(strProd) {
  var arr = splitProducts(strProd);
  for (var i = 0; i &lt; arr.length; i++) {
    if (arr[i] == "Y57") {
      return true;
    }
  }  
  return false;
}

/* 
 * splitProducts()
 * return an array of product components
 * str should be keyno_042.rawValue
 */

function splitProducts(str) {
  
  var prods = new Array();
  if (str != "" &amp;&amp; str != null &amp;&amp; str != undefined) {
    var arr = str.split(" ");
    for (var i = 0; i &lt; arr.length; i++) {
      if (arr[i] != "") {
        prods.push(arr[i]);
      }
    }
  }
  
  return prods;
}               

               
               
               

               
               
               

               
               
               

               
               
               

               
               
               

               
               
               

               
               
               

               <?templateDesigner isFragment yes?>
               <?templateDesigner fragmentTitle productUtils?>
               <?templateDesigner fragmentDescription Helper functions for product code manipulation?></script>
         </variables>
      </subform>
   </subform>
   <?templateDesigner FormTargetVersion 28?>
   <?templateDesigner Rulers horizontal:1, vertical:1, guidelines:1, crosshairs:0?>
   <?templateDesigner Zoom 132?></template>
<config xmlns="http://www.xfa.org/schema/xci/2.8/">
   <agent name="designer">
      <!--  [0..n]  -->
      <destination>pdf</destination>
      <pdf>
         <!--  [0..n]  -->
         <fontInfo/>
      </pdf>
   </agent>
   <present>
      <!--  [0..n]  -->
      <destination>pdf</destination>
      <pdf>
         <!--  [0..n]  -->
         <fontInfo/>
         <version>1.7</version>
         <adobeExtensionLevel>3</adobeExtensionLevel>
      </pdf>
      <xdp>
         <packets>*</packets>
      </xdp>
   </present>
</config>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.398682, 2009/08/10-13:00:47        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description xmlns:xmp="http://ns.adobe.com/xap/1.0/" rdf:about="">
         <xmp:MetadataDate>2012-08-27T23:33:33Z</xmp:MetadataDate>
         <xmp:CreatorTool>Adobe LiveCycle Designer ES 9.0</xmp:CreatorTool>
      </rdf:Description>
      <rdf:Description xmlns:pdf="http://ns.adobe.com/pdf/1.3/" rdf:about="">
         <pdf:Producer>Adobe LiveCycle Designer ES 9.0</pdf:Producer>
      </rdf:Description>
      <rdf:Description xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/" rdf:about="">
         <xmpMM:DocumentID>uuid:4ea45d0a-45f8-4540-b5df-628f43057788</xmpMM:DocumentID>
      </rdf:Description>
      <rdf:Description xmlns:lcd="http://ns.adobe.com/livecycle/designer/" xmlns:dc="http://purl.org/dc/elements/1.1/" rdf:about="">
         <lcd:fragmentCatalog>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <dc:title>
                     <rdf:Alt>
                        <rdf:li xml:lang="x-default">productUtils</rdf:li>
                     </rdf:Alt>
                  </dc:title>
                  <dc:description>
                     <rdf:Alt>
                        <rdf:li xml:lang="x-default">Helper functions for product code manipulation</rdf:li>
                     </rdf:Alt>
                  </dc:description>
                  <dc:identifier>$template.form1.#subform.#variables.productUtils</dc:identifier>
                  <lcd:fragmentRole>ScriptObject</lcd:fragmentRole>
               </rdf:li>
            </rdf:Seq>
         </lcd:fragmentCatalog>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
<localeSet xmlns="http://www.xfa.org/schema/xfa-locale-set/2.7/">
   <locale name="en_AU" desc="English (Australia)">
      <calendarSymbols name="gregorian">
         <monthNames>
            <month>January</month>
            <month>February</month>
            <month>March</month>
            <month>April</month>
            <month>May</month>
            <month>June</month>
            <month>July</month>
            <month>August</month>
            <month>September</month>
            <month>October</month>
            <month>November</month>
            <month>December</month>
         </monthNames>
         <monthNames abbr="1">
            <month>Jan</month>
            <month>Feb</month>
            <month>Mar</month>
            <month>Apr</month>
            <month>May</month>
            <month>Jun</month>
            <month>Jul</month>
            <month>Aug</month>
            <month>Sep</month>
            <month>Oct</month>
            <month>Nov</month>
            <month>Dec</month>
         </monthNames>
         <dayNames>
            <day>Sunday</day>
            <day>Monday</day>
            <day>Tuesday</day>
            <day>Wednesday</day>
            <day>Thursday</day>
            <day>Friday</day>
            <day>Saturday</day>
         </dayNames>
         <dayNames abbr="1">
            <day>Sun</day>
            <day>Mon</day>
            <day>Tue</day>
            <day>Wed</day>
            <day>Thu</day>
            <day>Fri</day>
            <day>Sat</day>
         </dayNames>
         <meridiemNames>
            <meridiem>AM</meridiem>
            <meridiem>PM</meridiem>
         </meridiemNames>
         <eraNames>
            <era>BC</era>
            <era>AD</era>
         </eraNames>
      </calendarSymbols>
      <datePatterns>
         <datePattern name="full">EEEE, D MMMM YYYY</datePattern>
         <datePattern name="long">D MMMM YYYY</datePattern>
         <datePattern name="med">DD/MM/YYYY</datePattern>
         <datePattern name="short">D/MM/YY</datePattern>
      </datePatterns>
      <timePatterns>
         <timePattern name="full">h:MM:SS A Z</timePattern>
         <timePattern name="long">h:MM:SS A</timePattern>
         <timePattern name="med">h:MM:SS A</timePattern>
         <timePattern name="short">h:MM A</timePattern>
      </timePatterns>
      <dateTimeSymbols>GyMdkHmsSEDFwWahKzZ</dateTimeSymbols>
      <numberPatterns>
         <numberPattern name="numeric">z,zz9.zzz</numberPattern>
         <numberPattern name="currency">$z,zz9.99</numberPattern>
         <numberPattern name="percent">z,zz9%</numberPattern>
      </numberPatterns>
      <numberSymbols>
         <numberSymbol name="decimal">.</numberSymbol>
         <numberSymbol name="grouping">,</numberSymbol>
         <numberSymbol name="percent">%</numberSymbol>
         <numberSymbol name="minus">-</numberSymbol>
         <numberSymbol name="zero">0</numberSymbol>
      </numberSymbols>
      <currencySymbols>
         <currencySymbol name="symbol">$</currencySymbol>
         <currencySymbol name="isoname">AUD</currencySymbol>
         <currencySymbol name="decimal">.</currencySymbol>
      </currencySymbols>
      <typefaces>
         <typeface name="Myriad Pro"/>
         <typeface name="Minion Pro"/>
         <typeface name="Courier Std"/>
         <typeface name="Adobe Pi Std"/>
         <typeface name="Adobe Hebrew"/>
         <typeface name="Adobe Arabic"/>
         <typeface name="Adobe Thai"/>
         <typeface name="Kozuka Gothic Pro-VI M"/>
         <typeface name="Kozuka Mincho Pro-VI R"/>
         <typeface name="Adobe Ming Std L"/>
         <typeface name="Adobe Song Std L"/>
         <typeface name="Adobe Myungjo Std M"/>
      </typefaces>
   </locale>
</localeSet></xdp:xdp>
